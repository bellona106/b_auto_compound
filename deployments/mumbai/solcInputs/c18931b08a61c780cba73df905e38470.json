{
  "language": "Solidity",
  "sources": {
    "contracts/vault/StrategyAave.sol": {
      "content": "// File: @openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IAaveStake.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAaveStake {\r\n    function depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable;\r\n    \r\n    function withdrawETH(address lendingPool, uint256 amount, address onBehalfOf) external;\r\n\r\n    function repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\r\n\r\n    function borrowETH(address lendingPool, uint256 amount, uint256 interesRateMode, uint16 referralCode) external;\r\n    \r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external payable;\r\n    \r\n    function withdraw(address asset, uint256 amount, address to) external;\r\n\r\n    function borrow(address asset, uint256 amount, uint256 interesRateMode, uint16 referralCode, address onBehalfOf) external;\r\n\r\n    function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\r\n    \r\n    function getUserAccountData(address user) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n    \r\n    \r\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\IProtocolDataProvider.sol\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IProtocolDataProvider {\r\n  struct TokenData {\r\n    string symbol;\r\n    address tokenAddress;\r\n  }\r\n\r\n  function getAllReservesTokens() external view returns (TokenData[] memory);\r\n  function getAllATokens() external view returns (TokenData[] memory);\r\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\r\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\r\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\r\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\r\n}\r\n\r\n// File: contracts\\interfaces\\IUniPair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniPair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n// File: contracts\\interfaces\\IUniRouter01.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountAVAX,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAX(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAXWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactAVAXForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactAVAX(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForAVAX(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapAVAXForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\IUniRouter02.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface IUniRouter02 is IUniRouter01 {\r\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IWETH.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: contracts\\vault\\StrategyAave.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract StrategyAave is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant aaveDataAddress    = 0xFA3bD19110d986c5e5E9DD5F69362d05035D045B; // Mumbai testnet // 0x7551b5D2763519d4e37e8B81929D336De671d46d; // Polygon\r\n    address public constant aaveDepositAddress = 0x9198F13B08E299d85E096929fA9781A1E3d5d827; // Mumbai testnet // 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf; // Polygon\r\n    address public constant aaveClaimAddress   = 0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644; // Mumbai testnet // 0x357D51124f59836DeD84c8a1730D72B749d8BC23; // Polygon\r\n\r\n    address public wantAddress;\r\n    address public aTokenAddress;\r\n    address public debtTokenAddress;\r\n    address public earnedAddress;\r\n    uint16 public referralCode = 0;\r\n\r\n    address public uniRouterAddress       = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; // Polygon/Mumbai testnet\r\n    address public constant wmaticAddress = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889; // Mumbai testnet // 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; // Polygon\r\n    address public constant usdcAddress   = 0xe6b8a5CF854791412c1f6EFC7CAf629f5Df1c747; // Mumbai testnet // 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; // Polygon\r\n    address public constant bbankAddress  = 0x63F7B7D85F9B02aD94c93A138a5b7508937b5942; // Mumbai testnet\r\n    address public constant vaultAddress  = 0xD81bdF78b3bC96EE1838fE4ee820145F8101BbE9;\r\n    address public constant feeAddress    = 0x2B8406c07613490cF56b978b8D531fd7EB066582;\r\n    \r\n    address public vaultChefAddress;\r\n    address public govAddress;\r\n\r\n    uint256 public lastEarnBlock = block.number;\r\n    uint256 public sharesTotal   = 0;\r\n\r\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public controllerFee = 50;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public buyBackRate = 450;\r\n    uint256 public constant feeMaxTotal = 1000;\r\n    uint256 public constant feeMax = 10000; // 100 = 1%\r\n\r\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\r\n    uint256 public constant withdrawFeeFactorMax = 10000;\r\n    uint256 public constant withdrawFeeFactorLL = 9900;\r\n\r\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\r\n    uint256 public constant slippageFactorUL = 995;\r\n    \r\n    /**\r\n     * @dev Variables that can be changed to config profitability and risk:\r\n     * {borrowRate}          - At What % of our collateral do we borrow per leverage level.\r\n     * {borrowDepth}         - How many levels of leverage do we take.\r\n     * {BORROW_RATE_MAX}     - A limit on how much we can push borrow risk.\r\n     * {BORROW_DEPTH_MAX}    - A limit on how many steps we can leverage.\r\n     */\r\n    uint256 public borrowRate;\r\n    uint256 public borrowDepth = 6;\r\n    uint256 public minLeverage;\r\n    uint256 public BORROW_RATE_MAX;\r\n    uint256 public BORROW_RATE_MAX_HARD;\r\n    uint256 public BORROW_DEPTH_MAX = 8;\r\n    uint256 public constant BORROW_RATE_DIVISOR = 10000;\r\n\r\n    address[] public aTokenArray;\r\n    address[] public earnedToUsdcPath;\r\n    address[] public earnedToBbankPath;\r\n    address[] public earnedToWantPath;\r\n\r\n    event SetSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress,\r\n        uint16 _referralCode\r\n    );\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == govAddress, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _vaultChefAddress,\r\n        address _wantAddress,\r\n        address _aTokenAddress,\r\n        address _debtTokenAddress,\r\n        address _earnedAddress,\r\n        address[] memory _earnedToUsdcPath,\r\n        address[] memory _earnedToBbankPath,\r\n        address[] memory _earnedToWantPath\r\n    ) {\r\n        govAddress = msg.sender;\r\n        vaultChefAddress = _vaultChefAddress;\r\n\r\n        wantAddress = _wantAddress;\r\n        aTokenAddress = _aTokenAddress;\r\n        aTokenArray = [aTokenAddress];\r\n        debtTokenAddress = _debtTokenAddress;\r\n\r\n        earnedAddress = _earnedAddress;\r\n\r\n        earnedToUsdcPath = _earnedToUsdcPath;\r\n        earnedToBbankPath = _earnedToBbankPath;\r\n        earnedToWantPath = _earnedToWantPath;\r\n        \r\n        (, uint256 ltv, uint256 threshold, , , bool collateral, bool borrow, , , ) = \r\n            IProtocolDataProvider(aaveDataAddress).getReserveConfigurationData(wantAddress);\r\n        BORROW_RATE_MAX = ltv * 99 / 100; // 1%\r\n        BORROW_RATE_MAX_HARD = ltv * 999 / 1000; // 0.1%\r\n        // At minimum, borrow rate always 10% lower than liquidation threshold\r\n        if (threshold * 9 / 10 > BORROW_RATE_MAX) {\r\n            borrowRate = BORROW_RATE_MAX;\r\n        } else {\r\n            borrowRate = threshold * 9 / 10;\r\n        }\r\n        // Only leverage if you can\r\n        if (!(collateral && borrow)) {\r\n            borrowDepth = 0;\r\n            BORROW_DEPTH_MAX = 0;\r\n        }\r\n\r\n        transferOwnership(_vaultChefAddress);\r\n\r\n        _resetAllowances();\r\n    }\r\n\r\n    function deposit(uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\r\n        // Call must happen before transfer\r\n        uint256 wantLockedBefore = wantLockedTotal();\r\n\r\n        IERC20(wantAddress).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _wantAmt\r\n        );\r\n\r\n        // Proper deposit amount for tokens with fees, or vaults with deposit fees\r\n        uint256 sharesAdded = _farm(_wantAmt);\r\n        if (sharesTotal > 0 && wantLockedBefore > 0) {\r\n            sharesAdded = sharesAdded * sharesTotal / wantLockedBefore;\r\n        }\r\n        sharesTotal = sharesTotal + sharesAdded;\r\n\r\n        return sharesAdded;\r\n    }\r\n\r\n    function _farm(uint256 _wantAmt) internal returns (uint256) {\r\n        uint256 wantAmt = wantLockedInHere();\r\n        if (wantAmt == 0) return 0;\r\n\r\n        // Cheat method to check for deposit fees in Aave\r\n        uint256 sharesBefore = wantLockedTotal() - _wantAmt;\r\n        _leverage(wantAmt);\r\n\r\n        return wantLockedTotal() - sharesBefore;\r\n    }\r\n\r\n    function withdraw(uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\r\n        require(_wantAmt > 0, \"_wantAmt is 0\");\r\n\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        \r\n        if (_wantAmt > wantAmt) {\r\n            // Fully deleverage\r\n            _deleverage();\r\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        }\r\n\r\n        if (_wantAmt > wantAmt) {\r\n            _wantAmt = wantAmt;\r\n        }\r\n\r\n        if (_wantAmt > wantLockedTotal()) {\r\n            _wantAmt = wantLockedTotal();\r\n        }\r\n\r\n        uint256 sharesRemoved = _wantAmt * sharesTotal / wantLockedTotal();\r\n\r\n        if (sharesRemoved > sharesTotal) {\r\n            sharesRemoved = sharesTotal;\r\n        }\r\n        sharesTotal = sharesTotal - sharesRemoved;\r\n\r\n        // Withdraw fee\r\n        uint256 withdrawFee = _wantAmt * ( withdrawFeeFactorMax - withdrawFeeFactor ) / withdrawFeeFactorMax;\r\n        if (withdrawFee > 0) {\r\n            IERC20(wantAddress).safeTransfer(vaultAddress, withdrawFee);\r\n        }\r\n\r\n        _wantAmt = _wantAmt - withdrawFee;\r\n\r\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\r\n\r\n        if (!paused()) {\r\n            // Put it all back in\r\n            _leverage(wantLockedInHere());\r\n        }\r\n\r\n        return sharesRemoved;\r\n    }\r\n\r\n    function _supply(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).deposit(wantAddress, _amount, address(this), referralCode);\r\n    }\r\n\r\n    function _borrow(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).borrow(wantAddress, _amount, 2, referralCode, address(this));\r\n    }\r\n\r\n    function _repayBorrow(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).repay(wantAddress, _amount, 2, address(this));\r\n    }\r\n\r\n    function _removeSupply(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).withdraw(wantAddress, _amount, address(this));\r\n    }\r\n\r\n    function _leverage(uint256 _amount) internal {\r\n        if (borrowDepth == 0) {\r\n            _supply(_amount);\r\n        } else if (_amount > minLeverage) {\r\n            for (uint256 i = 0; i < borrowDepth; i ++) {\r\n                _supply(_amount);\r\n                _amount = _amount * borrowRate / BORROW_RATE_DIVISOR;\r\n                _borrow(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deleverage() internal {\r\n        uint256 wantBal = wantLockedInHere();\r\n\r\n        if (borrowDepth > 0) {\r\n            while (wantBal < debtTotal()) {\r\n                _repayBorrow(wantBal);\r\n                _removeSupply(aTokenTotal() - supplyBalMin());\r\n                wantBal = wantLockedInHere();\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleverageOnce() external onlyGov {\r\n        _deleverageOnce();\r\n    }\r\n\r\n    function _deleverageOnce() internal {\r\n        if (aTokenTotal() <= supplyBalTargeted()) {\r\n            _removeSupply(aTokenTotal() - supplyBalMin());\r\n        } else {\r\n            _removeSupply(aTokenTotal() - supplyBalTargeted());\r\n        }\r\n\r\n        _repayBorrow(wantLockedInHere());\r\n    }\r\n\r\n    function earn() external nonReentrant whenNotPaused onlyGov {\r\n        uint256 preEarn = IERC20(earnedAddress).balanceOf(address(this));\r\n\r\n        // Harvest farm tokens\r\n        IAaveStake(aaveClaimAddress).claimRewards(aTokenArray, type(uint256).max, address(this));\r\n\r\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this)) - preEarn;\r\n\r\n        if (earnedAmt > 0) {\r\n            earnedAmt = distributeFees(earnedAmt);\r\n            earnedAmt = buyBack(earnedAmt);\r\n\r\n            if (earnedAddress != wantAddress) {\r\n                _safeSwap(\r\n                    earnedAmt,\r\n                    earnedToWantPath,\r\n                    address(this)\r\n                );\r\n            }\r\n\r\n            lastEarnBlock = block.number;\r\n\r\n            _leverage(wantLockedInHere());\r\n        }\r\n    }\r\n\r\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (controllerFee > 0) {\r\n            uint256 fee = _earnedAmt * controllerFee / feeMax;\r\n\r\n            IWETH(wmaticAddress).withdraw(fee);\r\n            safeTransferETH(feeAddress, fee);\r\n\r\n            _earnedAmt = _earnedAmt - fee;\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function buyBack(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (buyBackRate > 0) {\r\n            uint256 buyBackAmt = _earnedAmt * buyBackRate / feeMax;\r\n\r\n            _safeSwap(\r\n                buyBackAmt,\r\n                earnedToBbankPath,\r\n                buyBackAddress\r\n            );\r\n\r\n            _earnedAmt = _earnedAmt - buyBackAmt;\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function pause() external onlyGov {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyGov {\r\n        _unpause();\r\n        _resetAllowances();\r\n    }\r\n\r\n    function wantLockedInHere() public view returns (uint256) {\r\n        return IERC20(wantAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function wantLockedTotal() public view returns (uint256) {\r\n        return wantLockedInHere() + aTokenTotal() - debtTotal();\r\n    }\r\n\r\n    function _resetAllowances() internal {\r\n        IERC20(wantAddress).safeApprove(aaveDepositAddress, type(uint256).max);\r\n\r\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, type(uint256).max);\r\n    }\r\n\r\n    function resetAllowances() external onlyGov {\r\n        _resetAllowances();\r\n    }\r\n\r\n    function debtTotal() public view returns (uint256) {\r\n        return IERC20(debtTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function aTokenTotal() public view returns (uint256) {\r\n        return IERC20(aTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function supplyBalMin() public view returns (uint256) {\r\n        return debtTotal() * BORROW_RATE_DIVISOR / BORROW_RATE_MAX_HARD;\r\n    }\r\n\r\n    function supplyBalTargeted() public view returns (uint256) {\r\n        return debtTotal() * BORROW_RATE_DIVISOR / borrowRate;\r\n    }\r\n\r\n    function _safeSwap(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        address _to\r\n    ) internal {\r\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length - 1];\r\n\r\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _amountIn, \r\n            amountOut * slippageFactor, \r\n            _path, \r\n            _to, \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address _to, uint256 _value) internal {\r\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n\r\n    function rebalance(uint256 _borrowRate, uint256 _borrowDepth) external onlyGov {\r\n        require(_borrowRate <= BORROW_RATE_MAX, \"!rate\");\r\n        require(_borrowRate != 0, \"borrowRate is used as a divisor\");\r\n        require(_borrowDepth <= BORROW_DEPTH_MAX, \"!depth\");\r\n\r\n        _deleverage();\r\n        borrowRate = _borrowRate;\r\n        borrowDepth = _borrowDepth;\r\n        _leverage(wantLockedInHere());\r\n    }\r\n\r\n    function setSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress,\r\n        uint16 _referralCode\r\n    ) external onlyGov {\r\n        require(_controllerFee + _rewardRate + buyBackRate <= feeMaxTotal, \"Max fee of 100%\");\r\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \"_withdrawFeeFactor too low\");\r\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \"_withdrawFeeFactor too high\");\r\n        require(_slippageFactor <= slippageFactorUL, \"_slippageFactor too high\");\r\n\r\n        controllerFee = _controllerFee;\r\n        rewardRate = _rewardRate;\r\n        buyBackRate = _buyBackRate;\r\n        withdrawFeeFactor = _withdrawFeeFactor;\r\n        slippageFactor = _slippageFactor;\r\n        uniRouterAddress = _uniRouterAddress;\r\n        referralCode = _referralCode;\r\n\r\n        emit SetSettings(_controllerFee, _rewardRate, _buyBackRate, _withdrawFeeFactor, _slippageFactor, _uniRouterAddress, _referralCode);\r\n    }\r\n\r\n    function setGov(address _govAddress) external onlyGov {\r\n        govAddress = _govAddress;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}